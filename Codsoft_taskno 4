import pandas as pd

# Sample user ratings data
data = {
    'user_id': [1, 1, 1, 2, 2, 3, 3, 3, 4, 4],
    'movie_id': [1, 2, 3, 1, 3, 1, 2, 4, 3, 4],
    'rating': [5, 4, 3, 5, 4, 2, 4, 3, 5, 1]
}

ratings_df = pd.DataFrame(data)

def recommend_movies(user_id, ratings_df, num_recommendations=3):
    # Create a user-item matrix
    user_item_matrix = ratings_df.pivot(index='user_id', columns='movie_id', values='rating').fillna(0)

    # Compute the similarity matrix
    similarity_matrix = user_item_matrix.T.corr()

    # Get the user's ratings
    user_ratings = user_item_matrix.loc[user_id]

    # Get similar users
    similar_users = similarity_matrix[user_id].sort_values(ascending=False)

    # Find movies the user has not rated
    unrated_movies = user_item_matrix.columns[~user_item_matrix.columns.isin(user_ratings[user_ratings > 0].index)]

    # Calculate scores for unrated movies
    movie_scores = {}
    for movie in unrated_movies:
        score = sum(similar_users[similar_users.index != user_id] * user_item_matrix[movie])
        movie_scores[movie] = score

    # Get top recommendations
    recommended_movies = sorted(movie_scores.items(), key=lambda x: x[1], reverse=True)[:num_recommendations]
    
    return [movie for movie, score in recommended_movies]

# Example usage
if __name__ == "__main__":
    user_id = 1  # Change this to test with different users
    recommended = recommend_movies(user_id, ratings_df)
    print(f"Recommended movies for user {user_id}: {recommended}")
